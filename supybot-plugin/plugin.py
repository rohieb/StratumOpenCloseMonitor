###
# Copyright (c) 2012, Roland Hieber
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions, and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions, and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the author of this software nor the name of
#     contributors to this software may be used to endorse or promote products
#     derived from this software without specific prior written consent.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

###

import os
from datetime import datetime
import supybot.utils as utils
from supybot.commands import *
import supybot.plugins as plugins
import supybot.ircutils as ircutils
import supybot.callbacks as callbacks


class StratumMonitor(callbacks.Plugin):
  """Stratum 0 Open/Close Monitor"""
  pass

  HTDOCS_PATH = "/var/www/stuff/stratum0/status/"
  HTACCESS = '''# This file is generated by the Open/Close Monitor.
    ExpiresActive On
    ExpiresDefault "access plus 5 minutes"
    RewriteEngine on
    RewriteBase /stuff/stratum0/status
    RewriteRule ^status\.png$ %s [R,L]
    '''
  HTACCESS_FILE = ".htaccess"
  API_TEXT = '''Version: %s\r\nIsOpen: %s\r\nSince: %s\r\n'''
  API_TEXT_FILE = "status.txt"
  API_JSON = '''{ "version": "%s", "isOpen": %s, "since": "%s" }\r\n'''
  API_JSON_FILE = "status.json"
  API_XML = '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <status version="%s">
      <isOpen>%s</isOpen>
      <since>%s</since>
    </status>\r\n'''
  API_XML_FILE = "status.xml"

  VERSION = "0.1"   ### Bump this for new versions

  WEEKDAYS = ["Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"]

  def __init__(self, irc):
    self.__parent = super(StratumMonitor, self)
    self.__parent.__init__(irc)
    if(not self.HTDOCS_PATH.endswith("/")):
      self.HTDOCS_PATH = self.HTDOCS_PATH + "/"

    self.isOpen = False
    self.since = datetime.now()

  def topicTimeString(self, date):
    return "%s, %s" % (self.WEEKDAYS[date.weekday()], date.strftime("%H:%M"))

  def writeHtaccess(self):
    f = open(self.HTDOCS_PATH + self.HTACCESS_FILE, "w")
    f.write(self.HTACCESS % ("open.png" if self.isOpen else "closed.png"))
    f.flush()
    f.close()

  def writeApiFile(self, filename, template):
    f = open(self.HTDOCS_PATH + filename, "w")
    f.write(template % (self.VERSION, ("true" if self.isOpen else "false"),
      self.since.isoformat()))
    f.flush()
    f.close()

  def writeFiles(self):
    self.writeHtaccess()
    self.writeApiFile(self.API_TEXT_FILE, self.API_TEXT)
    self.writeApiFile(self.API_JSON_FILE, self.API_JSON)
    self.writeApiFile(self.API_XML_FILE, self.API_XML)

  def spaceopen(self, irc, msg, args):
    """
    This command is for internal use only. Any unauthorized use is prohibited.
    If you use it anyhow, this command will eat your dog, fry it and quarter it
    (in exactly this order). If you have no dog, it will take the Nyan cat
    instead.
    """
    self.since = datetime.now()
    self.isOpen = True;
    self.writeFiles()
    irc.reply("Space ist offen (Stand: %s)" % self.topicTimeString(self.since),
      prefixNick = False)

  spaceopen = wrap(spaceopen)

  def spaceclosed(self, irc, msg, args):
    """
    This command is for internal use only. Any unauthorized use is prohibited.
    If you use it anyhow, this command will eat your dog, fry it and quarter it
    (in exactly this order). If you have no dog, it will take the Nyan cat
    instead.
    """
    self.since = datetime.now()
    self.isOpen = False;
    self.writeFiles()
    irc.reply("Space ist zu (Stand: %s)" % self.topicTimeString(self.since),
      prefixNick = False)

  spaceclosed = wrap(spaceclosed)

  def spacestatus(self, irc, msg, args):
    if(self.isOpen):
      irc.reply("Space ist offen (seit %s)" % self.topicTimeString(self.since))
    else:
      irc.reply("Space ist zu (seit %s)" % self.topicTimeString(self.since))

  spacestatus = wrap(spacestatus)

Class = StratumMonitor

# vim:set shiftwidth=4 softtabstop=4 expandtab textwidth=79:
